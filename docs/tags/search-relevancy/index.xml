<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Search Relevancy on ashish.one</title>
    <link>https://ashish.one/tags/search-relevancy/</link>
    <description>Recent content in Search Relevancy on ashish.one</description>
    <image>
      <title>ashish.one</title>
      <url>https://ashish.one/img/speaker-pic/ashish.png</url>
      <link>https://ashish.one/img/speaker-pic/ashish.png</link>
    </image>
    <generator>Hugo -- 0.136.4</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Aug 2025 12:09:27 +0530</lastBuildDate>
    <atom:link href="https://ashish.one/tags/search-relevancy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hybrid Search Done Right: Stop Calling Metadata Filters &#34;Hybrid&#34;</title>
      <link>https://ashish.one/blogs/elastic/true-hybrid-search/</link>
      <pubDate>Mon, 25 Aug 2025 12:09:27 +0530</pubDate>
      <guid>https://ashish.one/blogs/elastic/true-hybrid-search/</guid>
      <description>&lt;h1 id=&#34;hybrid-search-done-right-stop-calling-metadata-filters-hybrid&#34;&gt;Hybrid Search Done Right: Stop Calling Metadata Filters &amp;ldquo;Hybrid&amp;rdquo;&lt;/h1&gt;
&lt;p&gt;Everyone’s talking about &lt;strong&gt;hybrid search&lt;/strong&gt; right now.
But here’s the uncomfortable truth:&lt;/p&gt;
&lt;p&gt;👉 Just because you glued vector search onto your database and added metadata filters doesn’t mean you’ve built &lt;em&gt;true&lt;/em&gt; hybrid search.&lt;/p&gt;
&lt;p&gt;That’s like duct-taping a spoiler on a hatchback and calling it a race car. 🚗💨&lt;/p&gt;
&lt;p&gt;Hybrid search is more than just “keyword + vector + filter.”
It’s about &lt;strong&gt;field-level design, reranking, scoring, and scale&lt;/strong&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="hybrid-search-done-right-stop-calling-metadata-filters-hybrid">Hybrid Search Done Right: Stop Calling Metadata Filters &ldquo;Hybrid&rdquo;</h1>
<p>Everyone’s talking about <strong>hybrid search</strong> right now.
But here’s the uncomfortable truth:</p>
<p>👉 Just because you glued vector search onto your database and added metadata filters doesn’t mean you’ve built <em>true</em> hybrid search.</p>
<p>That’s like duct-taping a spoiler on a hatchback and calling it a race car. 🚗💨</p>
<p>Hybrid search is more than just “keyword + vector + filter.”
It’s about <strong>field-level design, reranking, scoring, and scale</strong>.</p>
<p>Let’s break this down.</p>
<hr>
<h2 id="field-level-truth-not-every-field-deserves-semantic-search">Field-Level Truth: Not Every Field Deserves Semantic Search</h2>
<p>The biggest mistake I see:
Teams running semantic + lexical search on <em>every</em> field in their JSON docs.</p>
<p>That’s how you kill relevance.</p>
<h3 id="lexical-only-fields">Lexical-Only Fields</h3>
<p>These work best with exact match:</p>
<ul>
<li><code>title</code></li>
<li><code>name</code></li>
<li><code>issue_id</code></li>
<li><code>category</code></li>
<li><code>tags</code></li>
</ul>
<p>If I search for <code>issue_id: 1245</code>, I want <strong>1245</strong> — not “similar looking IDs.”</p>
<h3 id="semantic-only-fields">Semantic-Only Fields</h3>
<p>These benefit from embeddings:</p>
<ul>
<li><code>product_description</code></li>
<li><code>movie_storyline</code></li>
<li><code>customer_feedback</code></li>
<li><code>reviews</code></li>
</ul>
<p>This is where meaning &gt; keywords.
“Battery dies too quickly” should match with “poor battery life.”</p>
<h3 id="the-formula-that-works">The Formula That Works</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Final Score = RRF(
</span></span><span style="display:flex;"><span>   Lexical(title, name, category) +
</span></span><span style="display:flex;"><span>   Semantic(description, feedback, reviews)
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>Hybrid works when <strong>each field is treated for what it is</strong>.</p>
<h3 id="quick-reference-table">Quick Reference Table</h3>
<table>
  <thead>
      <tr>
          <th>Field Type</th>
          <th>Example Fields</th>
          <th>Best Search Method</th>
          <th>Why?</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Metadata / Identifiers</td>
          <td><code>id</code>, <code>issue_id</code>, <code>category</code></td>
          <td>Lexical</td>
          <td>Needs exact matching, filtering</td>
      </tr>
      <tr>
          <td>Structured Short Text</td>
          <td><code>title</code>, <code>name</code>, <code>tags</code></td>
          <td>Lexical</td>
          <td>Precision &gt; meaning</td>
      </tr>
      <tr>
          <td>Unstructured Text</td>
          <td><code>description</code>, <code>reviews</code></td>
          <td>Semantic</td>
          <td>Context + meaning matter</td>
      </tr>
  </tbody>
</table>
<hr>
<h2 id="metadata-filters-keep-them-lexical">Metadata Filters: Keep Them Lexical</h2>
<p>One of the biggest anti-patterns: vectorizing filters.</p>
<p>Filters are not semantic. They should remain <strong>exact</strong>.</p>
<ul>
<li>Price → numeric filters</li>
<li>Stock availability → boolean</li>
<li>Categories, IDs → keyword</li>
<li>Timestamps, geo → structured fields</li>
</ul>
<p>Search is about <em>precision here</em>. If you fuzzy up filters with embeddings, you’ll tank user trust.</p>
<hr>
<h2 id="hybrid--metadata-filters--vectors">Hybrid ≠ Metadata Filters + Vectors</h2>
<p>Here’s the thing. Some vector DBs shout <em>“we support keyword search now!”</em>
But if you look closer, it’s often:</p>
<ul>
<li>A bolted-on library</li>
<li>Or patched-in metadata filters</li>
</ul>
<p>Yeah, technically it works.
But <strong>that’s not hybrid</strong>.</p>
<p>Search is not just filters.</p>
<hr>
<h2 id="what-real-hybrid-search-looks-like">What Real Hybrid Search Looks Like</h2>
<p>Let’s talk the real stuff beyond filters + vectors:</p>
<ul>
<li><strong>Autocomplete</strong> — search-as-you-type, phrase suggesters, boosting, user-friendly completion.</li>
<li><strong>Facets</strong> — powerful aggregations: geo boundaries, date histograms, bucketing. Not just string counts.</li>
<li><strong>Native rescoring</strong> — query rescorer, rank features, boosting for freshness, popularity, personalization.</li>
<li><strong>Rich documents</strong> — nested JSON, arrays, geo points, IPs. Search isn’t flat.</li>
<li><strong>Geo Search</strong> — aggregations, polygons, proximity scoring. Beyond just “in radius.”</li>
<li><strong>Access control</strong> — index → document → field level security. For lexical <strong>and</strong> vector fields.</li>
<li><strong>Data enrichment pipelines</strong> — entity extraction, tagging, embeddings, LLM-based enrichment.</li>
<li><strong>Scalability</strong> — petabytes of data, tiered storage, lifecycle management. Search doesn’t stop at 10M docs.</li>
</ul>
<p>This is hybrid.</p>
<hr>
<h2 id="vectors-ask-the-hard-questions">Vectors: Ask the Hard Questions</h2>
<p>Not all vector support is equal. Check:</p>
<ul>
<li>Is vector search <strong>native to the engine</strong> or bolted on?</li>
<li>Query types: KNN, ANN, hybrid filtering?</li>
<li>Can it run at scale with good recall + low latency?</li>
<li>Quantization: int4, int8, binary, advanced methods like <strong>BBQ (Better Binary Quantization)</strong>?</li>
<li>Filters on HNSW: is it pre-filtering or filter-aware indexing (like ACORN)?</li>
<li>Can it blend semantic + lexical scoring at query time?
<ul>
<li>RRF (Reciprocal Rank Fusion)</li>
<li>Linear retrievers</li>
<li>Semantic reranking with LLMs</li>
</ul>
</li>
</ul>
<p>If your engine can’t do these, it’s not serious about hybrid.</p>
<hr>
<h2 id="implementation-note-one-query-should-do-it">Implementation Note: One Query Should Do It</h2>
<p>If you need to stitch 3–4 services together just to get:</p>
<ul>
<li>Facets</li>
<li>Filters</li>
<li>Semantic results</li>
<li>Lexical results</li>
<li>Reranking</li>
</ul>
<p>…you’re adding <strong>latency + complexity</strong>.</p>
<p>A true hybrid engine should give you everything in <strong>one structured query</strong>.</p>
<hr>
<h2 id="practical-takeaways">Practical Takeaways</h2>
<ol>
<li><strong>Not all fields deserve semantic.</strong> Treat fields differently.</li>
<li><strong>Filters are lexical.</strong> Stop semantic-izing metadata.</li>
<li><strong>Hybrid = lexical + semantic + rescoring + scale.</strong> Not just bolted-on keyword support.</li>
<li><strong>Evaluate vectors deeply.</strong> Native support, quantization, filtering, reranking.</li>
<li><strong>One query &gt; stitched services.</strong> Hybrid done right = clean pipeline, low latency.</li>
</ol>
<hr>
<h2 id="closing-thoughts">Closing Thoughts</h2>
<p>Hybrid search is not a checkbox.
It’s about designing for <strong>relevance + scale + control</strong>.</p>
<p>If your “hybrid” is just vectors + filters, you’ve built a demo — not a real search engine.</p>
<p>True hybrid is <strong>Lexical + Semantic + Scoring + Access + Scale + Control</strong>.
That’s when search feels natural, accurate, and production-ready.</p>
<hr>
]]></content:encoded>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Apm-Server on ashish.one</title>
    <link>http://localhost:1313/tags/apm-server/</link>
    <description>Recent content in Apm-Server on ashish.one</description>
    <image>
      <title>ashish.one</title>
      <url>https://ashish.one/img/speaker-pic/ashish.png</url>
      <link>https://ashish.one/img/speaker-pic/ashish.png</link>
    </image>
    <generator>Hugo -- 0.136.4</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Jan 2023 14:11:57 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/apm-server/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Start a single node elastic cluster with Docker Compose</title>
      <link>http://localhost:1313/blogs/elastic-docker-compose/</link>
      <pubDate>Wed, 08 Jun 2022 13:25:09 +0530</pubDate>
      <guid>http://localhost:1313/blogs/elastic-docker-compose/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this gist, we will quickly try to spin Elastic stacks with Docker containers. We are going to use &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;docker-compose&lt;/a&gt;. You can learn more about &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt;, Which will help you to understand the flow.&lt;/p&gt;
&lt;h1 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h1&gt;
&lt;p&gt;Tested on the below configuration.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker:&lt;code&gt;Docker version 20.10.16, build aa7e414&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;docker-compose:&lt;code&gt;Docker version 20.10.16, build aa7e414&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;cluster&#34;&gt;Cluster&lt;/h1&gt;
&lt;p&gt;This setup will include&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch&lt;/li&gt;
&lt;li&gt;Kibana&lt;/li&gt;
&lt;li&gt;Logstash&lt;/li&gt;
&lt;li&gt;APM&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;
&lt;p&gt;Clone repo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/ashishtiwari1993/elastic-docker.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd elastic-docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make changes in &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="introduction">Introduction</h1>
<p>In this gist, we will quickly try to spin Elastic stacks with Docker containers. We are going to use <a href="https://docs.docker.com/compose/">docker-compose</a>. You can learn more about <a href="https://www.docker.com/">Docker</a> &amp; <a href="https://docs.docker.com/compose/">Docker Compose</a>, Which will help you to understand the flow.</p>
<h1 id="prerequisite">Prerequisite</h1>
<p>Tested on the below configuration.</p>
<ul>
<li>docker:<code>Docker version 20.10.16, build aa7e414</code></li>
<li>docker-compose:<code>Docker version 20.10.16, build aa7e414</code></li>
</ul>
<h1 id="cluster">Cluster</h1>
<p>This setup will include</p>
<ul>
<li>Elasticsearch</li>
<li>Kibana</li>
<li>Logstash</li>
<li>APM</li>
</ul>
<h1 id="setup">Setup</h1>
<p>Clone repo:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git clone https://github.com/ashishtiwari1993/elastic-docker.git
</span></span><span style="display:flex;"><span>cd elastic-docker
</span></span></code></pre></div><p>Make changes in <code>.env</code> file.</p>
<h1 id="start-the-cluster">Start the cluster</h1>
<h2 id="start">Start</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker-compose up -d
</span></span></code></pre></div><p>Just visit to <code>localhost:5601</code>. You should see a kibana login page.</p>
<h2 id="stop">Stop</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker-compose down
</span></span></code></pre></div><h2 id="stop-with-deleting-network-containers-and-volumes">Stop with deleting network, containers and volumes</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker-compose down -v
</span></span></code></pre></div><h1 id="access-stacks">Access stacks</h1>
<h2 id="elasticsearch">Elasticsearch</h2>
<h3 id="access-via-curl-from-host-machine">Access via <code>curl</code> from host machine</h3>
<h4 id="copy-cacrt-file">Copy <code>ca.crt</code> file</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker cp elastic-docker_es01_1:/usr/share/elasticsearch/config/certs/ca/ca.crt /tmp/
</span></span></code></pre></div><h4 id="curl-command">Curl command</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>curl --cacert /tmp/ca.crt -u elastic:pass@123 https://localhost:9200
</span></span></code></pre></div><h2 id="logstash">Logstash</h2>
<ol>
<li>You need to have pipeline configuration files on <code>LOGSTASH_PIPELINE_PATH</code> location. If there will be no file, Logstash will throw an error and get exit.</li>
</ol>
<h1 id="note">NOTE</h1>
<blockquote>
<p>You can simply comment other stacks which is not needed. For example if you want to just run Elasticsearch &amp; Kibana, Just comment the APM or other stack specification.</p>
</blockquote>
]]></content:encoded>
    </item>
  </channel>
</rss>

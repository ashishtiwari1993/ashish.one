<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>docker on ashish.one</title>
    <link>https://ashish.one/tags/docker/</link>
    <description>Recent content in docker on ashish.one</description>
    <image>
      <url>https://www.gravatar.com/avatar/dcb52889deff3e5017a18de40c57add8?s=200</url>
      <link>https://www.gravatar.com/avatar/dcb52889deff3e5017a18de40c57add8?s=200</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jun 2022 13:25:09 +0530</lastBuildDate><atom:link href="https://ashish.one/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Start a single node elastic cluster with Docker Compose</title>
      <link>https://ashish.one/gist/elastic-docker-compose/</link>
      <pubDate>Wed, 08 Jun 2022 13:25:09 +0530</pubDate>
      
      <guid>https://ashish.one/gist/elastic-docker-compose/</guid>
      <description>Introduction In this gist, we will quickly try to spin Elastic stacks with Docker containers. We are going to use docker-compose. You can learn more about Docker &amp;amp; Docker Compose, Which will help you to understand the flow.
Prerequisite Tested on the below configuration.
 docker:Docker version 20.10.16, build aa7e414 docker-compose:Docker version 20.10.16, build aa7e414  Cluster This cluster will include
 Elasticsearch Kibana APM  .env file Make directory mkdir docker-elastic cd docker-elastic Create .</description>
      <content:encoded><![CDATA[<h1 id="introduction">Introduction</h1>
<p>In this gist, we will quickly try to spin Elastic stacks with Docker containers. We are going to use <a href="https://docs.docker.com/compose/">docker-compose</a>. You can learn more about <a href="https://www.docker.com/">Docker</a> &amp; <a href="https://docs.docker.com/compose/">Docker Compose</a>, Which will help you to understand the flow.</p>
<h1 id="prerequisite">Prerequisite</h1>
<p>Tested on the below configuration.</p>
<ul>
<li>docker:<code>Docker version 20.10.16, build aa7e414</code></li>
<li>docker-compose:<code>Docker version 20.10.16, build aa7e414</code></li>
</ul>
<h1 id="cluster">Cluster</h1>
<p>This cluster will include</p>
<ul>
<li>Elasticsearch</li>
<li>Kibana</li>
<li>APM</li>
</ul>
<h1 id="env-file"><code>.env</code> file</h1>
<h2 id="make-directory">Make directory</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>mkdir docker-elastic
</span></span><span style="display:flex;"><span>cd docker-elastic
</span></span></code></pre></div><h2 id="create-env-file">Create <code>.env</code> file</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># Password for the &#39;elastic&#39; user (at least 6 characters)</span>
</span></span><span style="display:flex;"><span>ELASTIC_PASSWORD<span style="color:#f92672">=</span>pass@123
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Password for the &#39;kibana_system&#39; user (at least 6 characters)</span>
</span></span><span style="display:flex;"><span>KIBANA_PASSWORD<span style="color:#f92672">=</span>pass@123
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Version of Elastic products</span>
</span></span><span style="display:flex;"><span>STACK_VERSION<span style="color:#f92672">=</span>8.2.2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set the cluster name</span>
</span></span><span style="display:flex;"><span>CLUSTER_NAME<span style="color:#f92672">=</span>docker-cluster
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set to &#39;basic&#39; or &#39;trial&#39; to automatically start the 30-day trial</span>
</span></span><span style="display:flex;"><span>LICENSE<span style="color:#f92672">=</span>basic
</span></span><span style="display:flex;"><span><span style="color:#75715e">#LICENSE=trial</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Port to expose Elasticsearch HTTP API to the host</span>
</span></span><span style="display:flex;"><span>ES_PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">9200</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#ES_PORT=127.0.0.1:9200</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Port to expose Kibana to the host</span>
</span></span><span style="display:flex;"><span>KIBANA_PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">5601</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#KIBANA_PORT=80</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Port to expose APM Server to the host</span>
</span></span><span style="display:flex;"><span>APM_PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">8200</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Increase or decrease based on the available host memory (in bytes)</span>
</span></span><span style="display:flex;"><span>MEM_LIMIT<span style="color:#f92672">=</span><span style="color:#ae81ff">1073741824</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Project namespace (defaults to the current folder name if not set)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#COMPOSE_PROJECT_NAME=myproject</span>
</span></span></code></pre></div><p>Save and close.</p>
<h1 id="create-docker-composeyml-file">Create <code>docker-compose.yml</code> file</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#34;2.2&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">setup</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">certs:/usr/share/elasticsearch/config/certs</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">user</span>: <span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">command</span>: &gt;<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      bash -c &#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        if [ x${ELASTIC_PASSWORD} == x ]; then
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          echo &#34;Set the ELASTIC_PASSWORD environment variable in the .env file&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          exit 1;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        elif [ x${KIBANA_PASSWORD} == x ]; then
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          echo &#34;Set the KIBANA_PASSWORD environment variable in the .env file&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          exit 1;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        fi;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        if [ ! -f config/certs/ca.zip ]; then
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          echo &#34;Creating CA&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          unzip config/certs/ca.zip -d config/certs;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        fi;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        if [ ! -f config/certs/certs.zip ]; then
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          echo &#34;Creating certs&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          echo -ne \
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          &#34;instances:\n&#34;\
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          &#34;  - name: es01\n&#34;\
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          &#34;    dns:\n&#34;\
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          &#34;      - es01\n&#34;\
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          &#34;      - localhost\n&#34;\
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          &#34;    ip:\n&#34;\
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          &#34;      - 127.0.0.1\n&#34;\
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          &gt; config/certs/instances.yml;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          unzip config/certs/certs.zip -d config/certs;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        fi;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        echo &#34;Setting file permissions&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        chown -R root:root config/certs;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        find . -type d -exec chmod 750 \{\} \;;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        find . -type f -exec chmod 640 \{\} \;;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        echo &#34;Waiting for Elasticsearch availability&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q &#34;missing authentication credentials&#34;; do sleep 30; done;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        echo &#34;Setting kibana_system password&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H &#34;Content-Type: application/json&#34; https://es01:9200/_security/user/kibana_system/_password -d &#34;{\&#34;password\&#34;:\&#34;${KIBANA_PASSWORD}\&#34;}&#34; | grep -q &#34;^{}&#34;; do sleep 10; done;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        echo &#34;All done!&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#39;</span>      
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">healthcheck</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">test</span>: [<span style="color:#e6db74">&#34;CMD-SHELL&#34;</span>, <span style="color:#e6db74">&#34;[ -f config/certs/es01/es01.crt ]&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">interval</span>: <span style="color:#ae81ff">1s</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">timeout</span>: <span style="color:#ae81ff">5s</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">retries</span>: <span style="color:#ae81ff">120</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">es01</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">setup</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">condition</span>: <span style="color:#ae81ff">service_healthy</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">certs:/usr/share/elasticsearch/config/certs</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">esdata01:/usr/share/elasticsearch/data</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">${ES_PORT}:9200</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">node.name=es01</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">cluster.name=${CLUSTER_NAME}</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">cluster.initial_master_nodes=es01</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">discovery.seed_hosts=</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">ELASTIC_PASSWORD=${ELASTIC_PASSWORD}</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">bootstrap.memory_lock=true</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">xpack.security.enabled=true</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">xpack.security.http.ssl.enabled=true</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">xpack.security.http.ssl.key=certs/es01/es01.key</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">xpack.security.http.ssl.certificate=certs/es01/es01.crt</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">xpack.security.http.ssl.verification_mode=certificate</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">xpack.security.transport.ssl.enabled=true</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">xpack.security.transport.ssl.key=certs/es01/es01.key</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">xpack.security.transport.ssl.certificate=certs/es01/es01.crt</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">xpack.security.transport.ssl.verification_mode=certificate</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">xpack.license.self_generated.type=${LICENSE}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">mem_limit</span>: <span style="color:#ae81ff">${MEM_LIMIT}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ulimits</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">memlock</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">soft</span>: -<span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">hard</span>: -<span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">healthcheck</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">test</span>:
</span></span><span style="display:flex;"><span>        [
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">&#34;CMD-SHELL&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">&#34;curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q &#39;missing authentication credentials&#39;&#34;</span>,
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">interval</span>: <span style="color:#ae81ff">10s</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">timeout</span>: <span style="color:#ae81ff">10s</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">retries</span>: <span style="color:#ae81ff">120</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">apm</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">es01</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">condition</span>: <span style="color:#ae81ff">service_healthy</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">docker.elastic.co/apm/apm-server:${STACK_VERSION}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">certs:/usr/share/apm-server/certs</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">${APM_PORT}:8200</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">command</span>: &gt;<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      apm-server -e
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         -E output.elasticsearch.hosts=[&#34;es01:9200&#34;]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         -E output.elasticsearch.protocol=https
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         -E output.elasticsearch.username=elastic
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         -E output.elasticsearch.password=pass@123
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         -E output.elasticsearch.ssl.enabled=true
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         -E output.elasticsearch.ssl.certificate_authorities=/usr/share/apm-server/certs/ca/ca.crt
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         -E output.elasticsearch.ssl.certificate=/usr/share/apm-server/certs/es01/es01.crt
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         -E output.elasticsearch.ssl.key=/usr/share/apm-server/certs/es01/es01.key</span>      
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kibana</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">es01</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">condition</span>: <span style="color:#ae81ff">service_healthy</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">docker.elastic.co/kibana/kibana:${STACK_VERSION}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">certs:/usr/share/kibana/config/certs</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">kibanadata:/usr/share/kibana/data</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">${KIBANA_PORT}:5601</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">SERVERNAME=kibana</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">ELASTICSEARCH_HOSTS=https://es01:9200</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">ELASTICSEARCH_USERNAME=kibana_system</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">mem_limit</span>: <span style="color:#ae81ff">${MEM_LIMIT}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">healthcheck</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">test</span>:
</span></span><span style="display:flex;"><span>        [
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">&#34;CMD-SHELL&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">&#34;curl -s -I http://localhost:5601 | grep -q &#39;HTTP/1.1 302 Found&#39;&#34;</span>,
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">interval</span>: <span style="color:#ae81ff">10s</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">timeout</span>: <span style="color:#ae81ff">10s</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">retries</span>: <span style="color:#ae81ff">120</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      
</span></span><span style="display:flex;"><span><span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">certs</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">driver</span>: <span style="color:#ae81ff">local</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">esdata01</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">driver</span>: <span style="color:#ae81ff">local</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kibanadata</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">driver</span>: <span style="color:#ae81ff">local</span>
</span></span></code></pre></div><p>Save and close.</p>
<h1 id="start-the-cluster">Start the cluster</h1>
<h2 id="start">Start</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker-compose up -d
</span></span></code></pre></div><h2 id="stop">Stop</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker-compose down
</span></span></code></pre></div><h2 id="stop-with-deleting-network-containers-and-volumes">Stop with deleting network, containers and volumes</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker-compose down -v
</span></span></code></pre></div><h1 id="note">NOTE</h1>
<blockquote>
<p>You can simply comment other stacks which is not needed. For example if you want to just run Elasticsearch &amp; Kibana, Just comment the APM or other stack specification.</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Part 1] Setup LEMP environment with Docker - Setup Nginx and PHP</title>
      <link>https://ashish.one/blogs/part-1-setup-lemp-environment-with-docker-setup-nginx-and-php/</link>
      <pubDate>Sat, 16 May 2020 17:01:47 +0530</pubDate>
      
      <guid>https://ashish.one/blogs/part-1-setup-lemp-environment-with-docker-setup-nginx-and-php/</guid>
      <description>Hi guys, In this series, we are going to setup LEMP Stack (Linux, Nginx, MySQL, PHP). Mainly it is used by web developers. I am assuming you have a basic idea about Docker &amp;amp; How it works.
In this blog, We are going to setup PHP and Nginx.
Why Docker? I will not go too much deep, You can find more resources over the internet about the docker.
Docker makes the installation process very smooth and it gives your isolated environment as the container.</description>
      <content:encoded><![CDATA[<p>Hi guys, In this series, we are going to setup LEMP Stack (Linux, Nginx, MySQL, PHP). Mainly it is used by web developers. I am assuming you have a basic idea about Docker &amp; How it works.</p>
<p>In this blog, We are going to setup PHP and Nginx.</p>
<h3 id="why-docker">Why Docker?</h3>
<p>I will not go too much deep, You can find more resources over the internet about the docker.</p>
<p>Docker makes the installation process very smooth and it gives your isolated environment as the container.</p>
<p>With the docker, There will be no more excuses like:</p>
<blockquote>
<p><strong>”It&rsquo;s working on my machine.”  :D</strong></p>
</blockquote>
<p>Because your docker environment remains the same across the platforms, So above excuses will going to turn with:</p>
<blockquote>
<p><strong>”It&rsquo;s working on every machine” ;)</strong></p>
</blockquote>
<p>In Short, Docker makes tech person&rsquo;s life easy like the developer, tester, etc.</p>
<h3 id="my-machine-configuration">My Machine configuration:</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>Docker Version: 18.09.7
</span></span><span style="display:flex;"><span>Docker Compose Version: 1.24.1
</span></span><span style="display:flex;"><span>RAM: 8GB
</span></span><span style="display:flex;"><span>OS: Ubuntu 18.04
</span></span></code></pre></div><p>Make sure docker and docker-compose is installed on your machine.</p>
<h3 id="step-1-create-folders">Step 1: Create folders:</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>mkdir LEMP
</span></span><span style="display:flex;"><span>cd LEMP
</span></span><span style="display:flex;"><span>mkdir <span style="color:#f92672">{</span>public_html,nginx_conf<span style="color:#f92672">}</span>
</span></span></code></pre></div><p><code>public_html</code>: It will contains your PHP code.<br>
<code>nginx_conf</code>: It will contains your Nginx configuration file.</p>
<h3 id="step-2-create-nginx-conf-file">Step 2: Create Nginx conf file</h3>
<p>Go to <code>nginx_conf</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>cd nginx_conf
</span></span></code></pre></div><p>Create file <code>lemp-docker.conf</code> (You can give any name according to your requirement) &amp; Paste below configuration block.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>server <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		listen 80;
</span></span><span style="display:flex;"><span>		server_name _;
</span></span><span style="display:flex;"><span>		root /public_html;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		location / <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				index index.php index.html;
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		location ~* <span style="color:#ae81ff">\.</span>php$ <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				fastcgi_pass    php:9000;
</span></span><span style="display:flex;"><span>				fastcgi_index   index.php;
</span></span><span style="display:flex;"><span>				include         fastcgi_params;
</span></span><span style="display:flex;"><span>				fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
</span></span><span style="display:flex;"><span>				fastcgi_param PATH_INFO $fastcgi_path_info;
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>Save and Exit from folder.</p>
<h3 id="step-3-create-file-docker-composeyml">Step 3: Create file <code>docker-compose.yml</code></h3>
<p>Create file <code>docker-compose.yml</code> in <code>LEMP</code> folder &amp; paste the below lines:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>version: <span style="color:#e6db74">&#39;3&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>services:
</span></span><span style="display:flex;"><span> web:
</span></span><span style="display:flex;"><span>  image: nginx
</span></span><span style="display:flex;"><span>  ports:
</span></span><span style="display:flex;"><span>   - <span style="color:#e6db74">&#34;80:80&#34;</span> 
</span></span><span style="display:flex;"><span>  volumes:
</span></span><span style="display:flex;"><span>   - ./public_html:/public_html
</span></span><span style="display:flex;"><span>   - ./nginx_conf:/etc/nginx/conf.d
</span></span><span style="display:flex;"><span>   - /tmp/nginx_logs:/var/log/nginx 
</span></span><span style="display:flex;"><span>  networks:
</span></span><span style="display:flex;"><span>   - nginx-php
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> php:
</span></span><span style="display:flex;"><span>  image: php:7.2-fpm
</span></span><span style="display:flex;"><span>  volumes:
</span></span><span style="display:flex;"><span>  - ./public_html:/public_html
</span></span><span style="display:flex;"><span>  networks:
</span></span><span style="display:flex;"><span>  - nginx-php
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>networks:
</span></span><span style="display:flex;"><span> nginx-php:
</span></span></code></pre></div><p>Here we have created the network with the name <code>nginx-php</code>. You can check more about the networks <a href="https://docs.docker.com/compose/networking/#specify-custom-networks">here</a>.</p>
<p>You can set <code>volumes</code> path according to your requirement.</p>
<h3 id="step-4-lets-up-the-containers">Step 4: Let&rsquo;s Up the containers</h3>
<p>Create container:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>cd LEMP/
</span></span><span style="display:flex;"><span>docker-compose up
</span></span></code></pre></div><p><strong>Note:</strong> Make sure no other service is running on port 80.</p>
<p>Output:</p>
<p><img loading="lazy" src="/img/lemp-docker/docker-compose-up.png" alt="docker compose up"  />
</p>
<p>You can hit the <code>localhost</code> on your browser.</p>
<p>Once you hit the <code>localhost</code> check nginx logs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>cat /tmp/nginx_logs/access.log 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>172.25.0.1 - - <span style="color:#f92672">[</span>16/May/2020:12:51:04 +0000<span style="color:#f92672">]</span> <span style="color:#e6db74">&#34;GET / HTTP/1.1&#34;</span> <span style="color:#ae81ff">404</span> <span style="color:#ae81ff">556</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#e6db74">&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36&#34;</span> <span style="color:#e6db74">&#34;-&#34;</span>
</span></span></code></pre></div><p>Now stop the containers by simply hitting <code>Ctrl + c</code>. Now run docker-compose in detached mode. It will run in the background.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker-compose up -d
</span></span></code></pre></div><p>Lists containers</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker-compose ps
</span></span></code></pre></div><h3 id="step-5-lets-create-testphp">Step 5: Let&rsquo;s Create <code>test.php</code></h3>
<p>Go to <code>LEMP/public_html</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>cd LEMP/public_html
</span></span></code></pre></div><p>Create file <code>test.php</code> &amp; paste below code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">echo</span> <span style="color:#a6e22e">phpinfo</span>();
</span></span></code></pre></div><h3 id="step-6-run-testphp">Step 6: Run <code>test.php</code></h3>
<p>Visit <a href="http://localhost/test.php">http://localhost/test.php</a>.</p>
<p>Output:</p>
<p><img loading="lazy" src="/img/lemp-docker/phpinfo.png" alt="phpinfo"  />
</p>
<h3 id="at-the-end">At the End</h3>
<p>We have successfully created Nginx and PHP Environment. In Part 2, We will check, How we can add MySQL to this environment.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>prometheus on ashish.one</title>
    <link>https://ashish.one/tags/prometheus/</link>
    <description>Recent content in prometheus on ashish.one</description>
    <image>
      <url>https://www.gravatar.com/avatar/dcb52889deff3e5017a18de40c57add8?s=200</url>
      <link>https://www.gravatar.com/avatar/dcb52889deff3e5017a18de40c57add8?s=200</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Apr 2020 21:32:48 +0530</lastBuildDate><atom:link href="https://ashish.one/tags/prometheus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Part 4] Setup Grafana With Prometheus</title>
      <link>https://ashish.one/blogs/setup-grafana-with-prometheus/</link>
      <pubDate>Fri, 03 Apr 2020 21:32:48 +0530</pubDate>
      
      <guid>https://ashish.one/blogs/setup-grafana-with-prometheus/</guid>
      <description>As you know Prometheus already having UI (localhost:9090). But it is not enough to give you better visualization on one screen. For better visualization and a graphical representation, we are going to use Grafana.
What is Grafana? As grafana.com says
”Grafana is the open-source analytics and monitoring solution for every database.”
This means Grafana is an independent tool for analytics and monitor which gives your various types of Graphs. It is not restricted to Prometheus DB only, You can use mostly any Databases like MySQL, Elasticsearch, etc.</description>
      <content:encoded><![CDATA[<p>As you know Prometheus already having UI (<code>localhost:9090</code>). But it is not enough to give you better visualization on one screen. For better visualization and a graphical representation, we are going to use Grafana.</p>
<h2 id="what-is-grafana">What is Grafana?</h2>
<p>As <a href="https://grafana.com">grafana.com</a> says</p>
<blockquote>
<p><strong>”Grafana is the open-source analytics and monitoring solution for every database.”</strong></p>
</blockquote>
<p>This means Grafana is an independent tool for analytics and monitor which gives your various types of Graphs. It is not restricted to Prometheus DB only, You can use mostly any Databases like MySQL, Elasticsearch, etc. So you can visualize different data points from the different databases on one screen. This is the flexibility and power Grafana provides.</p>
<p>Grafana works on TSDB(Time Series Database) or Your data should be save in time series manner. Check explaination <a href="https://grafana.com/docs/grafana/latest/guides/timeseries/">here</a>.</p>
<p>It has an alert system. You can configure an alert on Grafana itself for any Metric.</p>
<h2 id="why-grafana">Why Grafana?</h2>
<ol>
<li>Open-source of course freely Available</li>
<li>It is constantly contributed by the community. It is stable and used by many good brands.</li>
<li>Good community support and well documented.</li>
<li>You do not need any big infrastructure to get started.</li>
<li>Lots of pre-build Grafana dashboards already available and build by the community.  So it will be a rare case where you have to build your dashboard.</li>
</ol>
<h2 id="my-local-system-configuration">My local system configuration:</h2>
<ul>
<li>8GB RAM</li>
<li>Ubuntu 18.04 LTS</li>
</ul>
<p>You can check <a href="https://grafana.com/docs/grafana/latest/installation/requirements/">here</a> your system requirement according to your Operating System. Also, They explained different ways to install Grafana for different OS.</p>
<h2 id="setup-grafana">Setup Grafana</h2>
<h3 id="installation">Installation</h3>
<p>Grafana has two types of Software:</p>
<ol>
<li><strong>Enterprise Release</strong></li>
<li><strong>Open-Sources Software(OSS) or Community Release</strong></li>
</ol>
<p>We are going to install OSS Release.</p>
<h4 id="step-1-install-apt-transport-https">Step 1: Install <code>apt-transport-https</code></h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ sudo apt-get install -y apt-transport-https
</span></span></code></pre></div><p><img loading="lazy" src="/img/grafana-setup/apt-transport-https.png" alt="apt-transport-https"  />
</p>
<h4 id="step-2-install-wget">Step 2: Install <code>wget</code></h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ sudo apt-get install -y software-properties-common wget
</span></span></code></pre></div><p><img loading="lazy" src="/img/grafana-setup/install-wget.png" alt="install-wget"  />
</p>
<h4 id="step-3-add-key">Step 3: Add key</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
</span></span></code></pre></div><h4 id="step-4-add-apt-repository">Step 4: Add <code>apt</code> Repository</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ sudo add-apt-repository <span style="color:#e6db74">&#34;deb https://packages.grafana.com/oss/deb stable main&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>OK
</span></span></code></pre></div><h4 id="step-5-update--install">Step 5: Update &amp; Install</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ sudo apt-get update
</span></span><span style="display:flex;"><span>$ sudo apt-get install grafana
</span></span></code></pre></div><p><img loading="lazy" src="/img/grafana-setup/install-grafana.png" alt="install-grafana"  />
</p>
<h4 id="step-6-start-grafana-server">Step 6: Start <code>grafana-server</code></h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ sudo systemctl daemon-reload  
</span></span><span style="display:flex;"><span>$ sudo systemctl start grafana-server  
</span></span><span style="display:flex;"><span>$ sudo systemctl status grafana-server  
</span></span></code></pre></div><p><img loading="lazy" src="/img/grafana-setup/grafana-status.png" alt="grafana-status"  />
</p>
<h4 id="step-7-visit-localhost3000">Step 7: Visit <code>localhost:3000</code></h4>
<p><img loading="lazy" src="/img/grafana-setup/grafana-browser.png" alt="grafana-browser"  />
</p>
<h3 id="install-with-docker">Install with Docker</h3>
<p>Ignore this part if you not using docker.</p>
<pre tabindex="0"><code>docker run -d -p 3000:3000 grafana/grafana
</code></pre><p>visit <code>localhost:3000</code>.</p>
<p>We have successfully installed Grafana. Let&rsquo;s configure with Prometheus.</p>
<h2 id="configure-with-prometheus">Configure with Prometheus</h2>
<p>We already setup Prometheus in <a href="https://ashish.one/blogs/setup-prometheus-and-exporters/">part 1</a>. Now I am considering your Prometheus and Node exporter are running on port <code>9090</code> &amp; <code>9100</code> respectively.</p>
<h3 id="setup-grafana----prometheus">Setup Grafana &lt;&ndash;&gt; Prometheus</h3>
<h4 id="step-1-login-on-grafana">Step 1: Login on Grafana</h4>
<p>Visit <code>localhost:3000</code>. 3000 is the default port of Grafana, However, you can run on any port. To change the port see the <a href="https://grafana.com/docs/grafana/latest/installation/configuration/">configuration</a>.</p>
<p>Login into Grafana with default Credentials:</p>
<p><strong>Username</strong>:<code>admin</code><br>
<strong>Password</strong>:<code>admin</code></p>
<p>Now it will ask you to change your password. Once done, Click on <code>save</code>, You will be redirect on the dashboard.</p>
<p><img loading="lazy" src="/img/grafana-setup/grafana-dashboard.png" alt="grafana-dashboard"  />
</p>
<h4 id="step-2-add-data-source">Step 2: Add Data Source</h4>
<p>Goto Sidebar &amp; Navigate:</p>
<p><strong><em>Configuration -&gt; Data Sources</em></strong></p>
<p><img loading="lazy" src="/img/grafana-setup/datasource.png" alt="datasource"  />
</p>
<p>click on <code>Add data source</code>.
<img loading="lazy" src="/img/grafana-setup/prometheus-data-source.png" alt="prometheus-data-source"  />
</p>
<p>Search for <code>Prometheus</code> &amp; click on <code>Select</code>.</p>
<p>Add Prometheus endpoint in <code>URL</code> and click on <code>save &amp; Test</code>.</p>
<p><img loading="lazy" src="/img/grafana-setup/grafana-prometheus-config.png" alt="grafana-prometheus-config"  />
</p>
<p>You will get the notification for success. Here we have successfully integrated Grafana and Prometheus.</p>
<h4 id="step-3-add-dashboard">Step 3: Add Dashboard</h4>
<p>Here we have two option available:</p>
<ol>
<li><strong><em>Create your Dashboard</em></strong></li>
<li><strong><em>Import any pre-build Dashboard</em></strong></li>
</ol>
<p>We will go with the second option because that is the beauty of community :) People already build a dashboard for various stacks.</p>
<p>You can search for Dashboard from <a href="https://grafana.com/grafana/dashboards">https://grafana.com/grafana/dashboards</a> as per your requirement.</p>
<p>Here is the link for Node exporter dashboard: <a href="https://grafana.com/grafana/dashboards/1860">https://grafana.com/grafana/dashboards/1860</a></p>
<p>Here Dashboard ID is <code>1860</code>. Every dashboard which contributed in Grafana has unique ID. You can just import any dashboard by inserting the ID.</p>
<p><img loading="lazy" src="/img/grafana-setup/node-exporter-dashboard.png" alt="node-exporter-dashboard"  />
</p>
<p>On Grafana Goto sidebar &amp; Navigate:</p>
<p><strong><em>+(Plus/Add sign) -&gt; Import</em></strong></p>
<p>Enter Dashboard Id and click on <code>load</code>. After that<br>
<img loading="lazy" src="/img/grafana-setup/dashboard-id.png" alt="dashboard-id"  />
</p>
<p>Enter the Name &amp; select Prometheus on label <code>Prometheus</code> as shown in below image.
<img loading="lazy" src="/img/grafana-setup/dashboard-config.png" alt="dashboard-config"  />
</p>
<p>Click on <code>Import</code>.</p>
<p>Your Dashboard will be ready.</p>
<p><img loading="lazy" src="/img/grafana-setup/node-dashboard.png" alt="node-dashboard"  />
</p>
<p>Here we have successfully integrated the Grafana with Prometheus. You can explore more features of Grafana like Alerts, Users, etc.</p>
<p>For the alerting system, I prefer Prometheus Alertmanager only. You can check more details on the Alertmanager in <a href="https://ashish.one/blogs/setup-alertmanager/">part 2</a>. It gives you more control and advanced feature.</p>
<p>But every tool has use cases and built for special purposes. You can choose according to your requirements.</p>
<p><strong>In case of any confusion or issues leave comments below :)</strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Part 3] How to write custom prometheus exporter?</title>
      <link>https://ashish.one/blogs/write-custom-exporters-prometheus/</link>
      <pubDate>Fri, 29 Nov 2019 22:51:27 +0530</pubDate>
      
      <guid>https://ashish.one/blogs/write-custom-exporters-prometheus/</guid>
      <description>Introduction In PART-1 and PART-2, We have seen how prometheus works and how to setup Prometheus and exporters. We have readymade exporters available on the internet.
But sometime there is situation where you need to store your own custom metrics on prometheus. In such case you have to write your own exporters which will exporters the data into Prometheus.
There is two way to exporting the data on prometheus: 1. Exporting to a Pushgateway Here we metrics are getting the push to prometheus server.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In <a href="https://ashish.one/blogs/setup-prometheus-and-exporters/">PART-1</a> and <a href="https://ashish.one/blogs/setup-alertmanager/">PART-2</a>, We have seen how prometheus works and how to setup Prometheus and exporters. We have readymade exporters available on the internet.</p>
<p>But sometime there is situation where you need to store your own custom metrics on prometheus. In such case you have to write your own exporters which will exporters the data into Prometheus.</p>
<h2 id="there-is-two-way-to-exporting-the-data-on-prometheus">There is two way to exporting the data on prometheus:</h2>
<h3 id="1-exporting-to-a-pushgateway">1. Exporting to a Pushgateway</h3>
<p>Here we metrics are getting the push to prometheus server. It not exposed over any URL or port. Internally it directly calls to Prometheus host and pushes the metrics to that.</p>
<h3 id="2-exposing-over-http-on-specific-port">2. Exposing over HTTP (on specific port)</h3>
<p>In this option, Exporter will expose all data over HTTP in prometheus data format. Like below:</p>
<p><img loading="lazy" src="/img/prometheus-setup/node_exporter_metrics.png" alt="Node exporter metrics"  />
</p>
<p>It exposes the data on a specific port e.g <code>http://myurl:8000</code>.</p>
<h2 id="basic-example">Basic Example</h2>
<p>Let&rsquo;s take a very basic example, Suppose there is one script (Daemon service) is running with the name <code>myprocess.go</code>. What do we do in real life to check if some script is running or not? We just hit <code>ps</code> command like below:</p>
<p><code>ps -ef | grep 'myprocess'</code></p>
<p>Now we are going to do the same in our exporter. It will hit the same command and if script is running we will set value <code>1</code> else <code>0</code>.</p>
<h2 id="writing-exporter">Writing Exporter</h2>
<p>We are going to use the Second option (Exposing over HTTP).</p>
<h3 id="step-1">Step 1</h3>
<p>We going to use <a href="https://github.com/prometheus/client_python">python_client</a>. Just install it with below <code>pip</code> command:</p>
<p><code>pip install prometheus_client</code></p>
<h3 id="step-2">Step 2</h3>
<p>We need webserver gateway, For which we are going to use <a href="https://www.python.org/dev/peps/pep-0333/">WSGI</a>.</p>
<h3 id="step-3">Step 3</h3>
<p>Whenever we are writing exporters, We need to take care of metric type storage. Prometheus offered four types of metrics: Counter, Gauge, Summary, and Histogram. You can explore more <a href="https://github.com/prometheus/client_python#instrumenting">here</a>. Decide your metric type before pushing data.</p>
<h3 id="step-4">Step 4</h3>
<p>We are going to run a webserver on <code>8000</code> port and exposing the result on <code>/metrics</code> path. So to access metrics just hit <code>http://myurl.com:8000/metrics</code>.</p>
<h3 id="step-5">Step 5</h3>
<p>Complet sample code from my gist:</p>
<script type="application/javascript" src="https://gist.github.com/ashishtiwari1993/7fca576c55cce93b8b980cdfcc420744.js"></script>

<h3 id="step-6">Step 6</h3>
<p>Add config in <code>prometheus.yml</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>  - job_name: service_up_exporter
</span></span><span style="display:flex;"><span>    scrape_interval: 2m
</span></span><span style="display:flex;"><span>    scrape_timeout:  2m
</span></span><span style="display:flex;"><span>    metrics_path: <span style="color:#e6db74">&#34;/metrics&#34;</span>
</span></span><span style="display:flex;"><span>    static_configs:
</span></span><span style="display:flex;"><span>    - targets: <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;exporterurl.com:8000/metrics&#39;</span><span style="color:#f92672">]</span>
</span></span></code></pre></div><h3 id="step-7">Step 7</h3>
<p>Restart prometheus service:</p>
<p><code>sudo service prometheus restart</code></p>
<blockquote>
<p>This is just a very basic example. It is a simple script to understand the way of writing exporters. You can write your custom exporters according to your use case.</p>
</blockquote>
<p>Here we have successfully write exporter which will expose the metrics. To know more about pushgateway or HTTP expoorter visit <a href="https://github.com/prometheus/client_python#instrumenting">here</a></p>
<p>In <a href="https://ashish.one/blogs/setup-grafana-with-prometheus/">part - 4</a>, I have explained how you can integrate Grafana with Prometheus.</p>
<p>Share you comments below :)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Part 2] How to setup alertmanager and send alerts ?</title>
      <link>https://ashish.one/blogs/setup-alertmanager/</link>
      <pubDate>Wed, 23 Oct 2019 15:24:26 +0530</pubDate>
      
      <guid>https://ashish.one/blogs/setup-alertmanager/</guid>
      <description>Introduction In PART - 1, We have successfully setup Prometheus and exporters. In this part, we are going to setup alertmanager and will send our first alert.
Alertmanager is software that is maintained by the prometheus and it is written in Go. It takes care of deduplicating, grouping, and routing them to the correct receiver integration such as email, PagerDuty, or OpsGenie. It also takes care of silencing and inhibition of alerts.</description>
      <content:encoded><![CDATA[<h1 id="introduction">Introduction</h1>
<p>In <a href="https://ashish.one/blogs/setup-prometheus-and-exporters/">PART - 1</a>, We have successfully setup Prometheus and exporters. In this part, we are going to setup alertmanager and will send our first alert.</p>
<p>Alertmanager is software that is maintained by the prometheus and it is written in Go. It takes care of deduplicating, grouping, and routing them to the correct receiver integration such as email, PagerDuty, or OpsGenie. It also takes care of silencing and inhibition of alerts.</p>
<p>Let&rsquo;s setup alertmanage: )</p>
<h1 id="setup-alertmanager">Setup Alertmanager</h1>
<h2 id="installation">Installation:</h2>
<p>Prerequisites will be the same as <a href="https://ashish.one/blogs/setup-prometheus-and-exporters/">PART - 1</a> . We will download the precompiled binary of alertmanager. Although there is a docker image also available which you can use.</p>
<h3 id="step-1-download-alertmanager">Step 1: Download alertmanager</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ wget https://github.com/prometheus/prometheus/releases/download/v2.13.1/prometheus-2.13.1.linux-amd64.tar.gz
</span></span></code></pre></div><p><img loading="lazy" src="/img/alertmanager-setup/download_alertmanager.png" alt="alertmanager binary download"  />
</p>
<h3 id="step-2-extract-tar">Step 2: Extract tar</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ tar -xvzf alertmanager-0.19.0.linux-amd64.tar.gz
</span></span></code></pre></div><h3 id="step-3-folder-structure">Step 3: Folder structure</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ mv alertmanager-0.19.0.linux-amd64 alertmanager
</span></span><span style="display:flex;"><span>$ cd alertmanager/
</span></span><span style="display:flex;"><span>$ ll
</span></span></code></pre></div><p>Folder contains below files:</p>
<p><img loading="lazy" src="/img/alertmanager-setup/folder_structure.png" alt="alertmanager folder structure"  />
</p>
<ul>
<li><code>alertmanager</code>: It is a binary file that is core Daemon of alertmanager.</li>
<li><code>alertmanager.yml</code>: This is config file for alertmanager service.</li>
<li><code>amtool</code>: It is another binary that can be used as a command line utility to manager or silence the alerts on alertmanager.</li>
</ul>
<h3 id="step--4-run-alertmanager">Step  4: Run alertmanager</h3>
<p>Execute binary:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>./alertmanager
</span></span></code></pre></div><p><img loading="lazy" src="/img/alertmanager-setup/execute_alertmanager.png" alt="alertmanager folder structure"  />
</p>
<p>Visit to <code>localhost:9093</code> on your browser:</p>
<p><img loading="lazy" src="/img/alertmanager-setup/alertmanager_web.png" alt="alertmanager web"  />
</p>
<p>Your alertmanager is up :) Like prometheus it is creating folder with the name <code>data</code>. Alertmanager starts storing data in <code>/data</code> folder.</p>
<p>To check alertmanager metrics just visit <code>localhost:9093/metrics</code></p>
<p>My production execution command is</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>~/alertmanager/alertmanager --config.file<span style="color:#f92672">=</span>~/alertmanager/alertmanager.yml --storage.path<span style="color:#f92672">=</span>/var/lib/alertmanager --web.external-url<span style="color:#f92672">=</span>http://myurl.com:9093
</span></span></code></pre></div><ul>
<li><code>--storage.tsdb.path</code> : Specify the path where you want to save prometheus data.</li>
<li><code>--web.external-url</code> : You can use this option if you want to bind your address with your URL.</li>
</ul>
<h3 id="step-5-run-alertmanager-as-service">Step 5: Run alertmanager as service</h3>
<ol>
<li>Create file</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>vim /etc/systemd/system/alertmanager.service
</span></span></code></pre></div><ol start="2">
<li>Paste Below code</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#f92672">[</span>Unit<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>Description<span style="color:#f92672">=</span>AlertManager Server Service
</span></span><span style="display:flex;"><span>Wants<span style="color:#f92672">=</span>network-online.target
</span></span><span style="display:flex;"><span>After<span style="color:#f92672">=</span>network-online.target
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>Service<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>User<span style="color:#f92672">=</span>root
</span></span><span style="display:flex;"><span>Type<span style="color:#f92672">=</span>Simple
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ExecStart<span style="color:#f92672">=</span>~/alertmanager/alertmanager --config.file<span style="color:#f92672">=</span>~/alertmanager/alertmanager.yml --storage.path<span style="color:#f92672">=</span>/var/lib/alertmanager --web.external-url<span style="color:#f92672">=</span>http://myurl.com:9093
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>Install<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>WantedBy<span style="color:#f92672">=</span>multi-user.target
</span></span></code></pre></div><p>Save and exit.</p>
<p>It won’t run because <code>alertmanager.yml</code> is not defined yet. <code>alertmanager.yml</code> file is defined below.</p>
<ol start="3">
<li>Reload the Systemctl Daemon:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ sudo systemctl daemon-reload
</span></span></code></pre></div><ol start="4">
<li>To start alertmanager service</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ sudo systemctl start alertmanager
</span></span></code></pre></div><h2 id="setup-alerts">Setup Alerts</h2>
<h3 id="step-1-add-settings-in-prometheusyml">Step 1: Add settings in <code>prometheus.yml</code></h3>
<p>Open <code>prometheus.yml</code> file</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ vim ~/prometheus/prometheus.yml
</span></span></code></pre></div><p>Add below code</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>scrape_configs:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span>
</span></span><span style="display:flex;"><span>  - job_name: <span style="color:#e6db74">&#39;prometheus&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># metrics_path defaults to &#39;/metrics&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># scheme defaults to &#39;http&#39;.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    static_configs:
</span></span><span style="display:flex;"><span>    - targets: <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;localhost:9090&#39;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Add below block for node_exporter</span>
</span></span><span style="display:flex;"><span>  - job_name: node_exporter
</span></span><span style="display:flex;"><span>    scrape_interval: 1m
</span></span><span style="display:flex;"><span>    scrape_timeout:  1m
</span></span><span style="display:flex;"><span>    metrics_path: <span style="color:#e6db74">&#34;/metrics&#34;</span>
</span></span><span style="display:flex;"><span>    static_configs:
</span></span><span style="display:flex;"><span>    - targets: <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;localhost:9100&#39;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Alertmanager settings</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>rule_files:
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#39;~/prometheus/alert.rules.yml&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>alerting:
</span></span><span style="display:flex;"><span>  alertmanagers:
</span></span><span style="display:flex;"><span>  - static_configs:
</span></span><span style="display:flex;"><span>    - targets:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#39;myurl.com:9093&#39;</span>
</span></span></code></pre></div><ul>
<li>
<p><code>rule_files</code>: These are the files that contain all kinds of rules. Prometheus has own syntax to define rules. We will see this below.</p>
</li>
<li>
<p><code>alerting</code>: This is an option where we have to define alertmanager configuration. In target, we have defined <code>myurl.com:9093</code> this is the exact port where our alertmanager is running.</p>
</li>
</ul>
<h3 id="step-2-how-prometheus-service-will-work">Step 2: How prometheus service will work?</h3>
<p>In above <code>scrape_config</code> we have defined scrape configurations. In the above example, prometheus will scrape <code>node_exporter</code> job at every 1 minute (scrape_interval is 1m. it will scrape all information which is available on <code>localhost:9100/metrics</code> (It will scrape all targets which is defined in the <code>targets</code> array).</p>
<p>It will store the data in the Internal database.</p>
<p>At every scraping, it will keep evaluating alert rules which defined in <code>alert.rules.yml</code>. As soon as any alert rules get true it will send an event to alertmanager on <code>myurl.com:9093</code></p>
<p>Once alertmanager received events, It will check by which channel alert needs to be trigger like via slack, email pagerduty, etc which defined in <code>alertmanager.yml</code> &amp; it will trigger an alert via appropriate channel. Now let’s define two files :</p>
<ol>
<li><code>alert.rules.yml</code></li>
<li><code>alertmanager.yml</code></li>
</ol>
<h3 id="step-3-create-alertrulesyml">Step 3: Create <code>alert.rules.yml</code></h3>
<p>Create <code>~/prometheus/alert.rules.yml</code> file and paste below sample rule:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>groups:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- name: Disk-usage
</span></span><span style="display:flex;"><span>  rules:
</span></span><span style="display:flex;"><span>  - alert: <span style="color:#e6db74">&#39;Low data disk space&#39;</span>
</span></span><span style="display:flex;"><span>    expr: ceil<span style="color:#f92672">(((</span>node_filesystem_size_bytes<span style="color:#f92672">{</span>mountpoint!<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/boot&#34;</span><span style="color:#f92672">}</span> - node_filesystem_free_bytes<span style="color:#f92672">{</span>mountpoint!<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/boot&#34;</span><span style="color:#f92672">})</span> / node_filesystem_size_bytes<span style="color:#f92672">{</span>mountpoint!<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/boot&#34;</span><span style="color:#f92672">}</span> * 100<span style="color:#f92672">))</span> &gt; <span style="color:#ae81ff">95</span>
</span></span><span style="display:flex;"><span>    labels:
</span></span><span style="display:flex;"><span>      severity: <span style="color:#e6db74">&#39;critical&#39;</span>
</span></span><span style="display:flex;"><span>    annotations:
</span></span><span style="display:flex;"><span>      title: <span style="color:#e6db74">&#34;Disk Usage&#34;</span>
</span></span><span style="display:flex;"><span>      description: <span style="color:#e6db74">&#39;Partition : {{$labels.mountpoint}}&#39;</span>
</span></span><span style="display:flex;"><span>      summary: <span style="color:#e6db74">&#34;Disk usage is `{{humanize </span>$value<span style="color:#e6db74">}}%`&#34;</span>
</span></span><span style="display:flex;"><span>      host: <span style="color:#e6db74">&#34;{{</span>$labels<span style="color:#e6db74">.instance}}&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- name: Memory-usage
</span></span><span style="display:flex;"><span>  rules:
</span></span><span style="display:flex;"><span>  - alert: <span style="color:#e6db74">&#39;High memory usage&#39;</span>
</span></span><span style="display:flex;"><span>    expr: ceil<span style="color:#f92672">((((</span>node_memory_MemTotal_bytes - node_memory_MemFree_bytes - node_memory_Buffers_bytes - node_memory_Cached_bytes<span style="color:#f92672">)</span> / node_memory_MemTotal_bytes<span style="color:#f92672">)</span> * 100<span style="color:#f92672">))</span> &gt; <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span>    labels:
</span></span><span style="display:flex;"><span>      severity: <span style="color:#e6db74">&#39;critical&#39;</span>
</span></span><span style="display:flex;"><span>    annotations:
</span></span><span style="display:flex;"><span>      title: <span style="color:#e6db74">&#34;Memory Usage&#34;</span>
</span></span><span style="display:flex;"><span>      description: <span style="color:#e6db74">&#39;Memory usage threshold set to `80%`.&#39;</span>
</span></span><span style="display:flex;"><span>      summary: <span style="color:#e6db74">&#34;Memory usage is `{{humanize </span>$value<span style="color:#e6db74">}}%`&#34;</span>
</span></span><span style="display:flex;"><span>      host: <span style="color:#e6db74">&#34;{{</span>$labels<span style="color:#e6db74">.instance}}&#34;</span>
</span></span></code></pre></div><p>Here we have defined two rules.</p>
<ol>
<li>If memory utilization is exceeded than 80% then it will trigger an email.</li>
<li>If any disk partition usage exceeded than 95% then it will trigger an email.</li>
</ol>
<p>You will get more insights on defining alerting rules <a href="https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/">here</a>.</p>
<p>Now you might be wondering what is <code>node_filesystem_size_bytes</code> or <code>node_memory_MemTotal_bytes</code> ?</p>
<p>If we recall part - 1 when we set up the node exporter and visited on <code>localhost:9100/metrics</code>, It has shown some metric. In that will get the above variable name. If you want to put any alert rules irrespective of any exporters, You have to make <code>expr</code> using these variables.</p>
<p>You can compile your alert rule file :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ promtool check rules alert.rules.yml
</span></span></code></pre></div><p><code>promtool</code> is binary which we got in prometheus folder when we extracted it.</p>
<p>You can explore some sample rules <a href="https://awesome-prometheus-alerts.grep.to/rules.html">here</a>.</p>
<h3 id="step-4-create-alertmanageryml">Step 4: Create alertmanager.yml</h3>
<p>Create <code>~/alertmanager/alertmanager.yml</code> file and paste below code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>global:
</span></span><span style="display:flex;"><span>  slack_api_url: <span style="color:#e6db74">&#34;https://hooks.slack.com/services/XXXXXXXXXXXXXXX&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>route:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  receiver: <span style="color:#e6db74">&#34;default&#34;</span>
</span></span><span style="display:flex;"><span>  routes:
</span></span><span style="display:flex;"><span>   - match:
</span></span><span style="display:flex;"><span>      severity: info
</span></span><span style="display:flex;"><span>     receiver: slack
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   - match:
</span></span><span style="display:flex;"><span>      severity: critical
</span></span><span style="display:flex;"><span>     receiver: email
</span></span><span style="display:flex;"><span>     group_wait: 30s
</span></span><span style="display:flex;"><span>     group_interval: 5m
</span></span><span style="display:flex;"><span>     repeat_interval: 5m
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>receivers:
</span></span><span style="display:flex;"><span>  - name: default
</span></span><span style="display:flex;"><span>    email_configs:
</span></span><span style="display:flex;"><span>     - to: <span style="color:#e6db74">&#39;to@youremail.com&#39;</span>
</span></span><span style="display:flex;"><span>       from: <span style="color:#e6db74">&#39;default-alerts@yourdomain.com&#39;</span>
</span></span><span style="display:flex;"><span>       smarthost: <span style="color:#e6db74">&#39;smtp.host.com:2525&#39;</span>
</span></span><span style="display:flex;"><span>       auth_username: <span style="color:#e6db74">&#34;smtpusername&#34;</span>
</span></span><span style="display:flex;"><span>       auth_password: <span style="color:#e6db74">&#34;smtppassword&#34;</span>
</span></span><span style="display:flex;"><span>       html: <span style="color:#e6db74">&#39;{{ template &#34;email&#34; .}}&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - name: slack
</span></span><span style="display:flex;"><span>    slack_configs:
</span></span><span style="display:flex;"><span>      - send_resolved: true
</span></span><span style="display:flex;"><span>        username: <span style="color:#e6db74">&#39;{{ template &#34;slack.default.username&#34; . }}&#39;</span>
</span></span><span style="display:flex;"><span>        color: <span style="color:#e6db74">&#39;{{ if eq .Status &#34;firing&#34; }}good{{ else }}good{{ end }}&#39;</span>
</span></span><span style="display:flex;"><span>        title: <span style="color:#e6db74">&#39;{{ template &#34;slack.default.title&#34; . }}&#39;</span>
</span></span><span style="display:flex;"><span>        title_link: <span style="color:#e6db74">&#39;{{ template &#34;slack.default.titlelink&#34; . }}&#39;</span>
</span></span><span style="display:flex;"><span>        pretext: <span style="color:#e6db74">&#39;{{ .CommonAnnotations.summary }}&#39;</span>
</span></span><span style="display:flex;"><span>        text:
</span></span><span style="display:flex;"><span>         &gt;-
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">{{</span> range .Alerts <span style="color:#f92672">}}</span>
</span></span><span style="display:flex;"><span>           *Alert:* <span style="color:#f92672">{{</span> .Annotations.summary <span style="color:#f92672">}}</span> - <span style="color:#e6db74">`</span><span style="color:#f92672">{{</span> .Labels.severity <span style="color:#f92672">}}</span><span style="color:#e6db74">`</span>📊
</span></span><span style="display:flex;"><span>           *Description:* <span style="color:#f92672">{{</span> .Annotations.description <span style="color:#f92672">}}</span>
</span></span><span style="display:flex;"><span>           *Details:*
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">{{</span> range .Labels.SortedPairs <span style="color:#f92672">}}</span> • *<span style="color:#f92672">{{</span> .Name <span style="color:#f92672">}}</span>:* <span style="color:#e6db74">`</span><span style="color:#f92672">{{</span> .Value <span style="color:#f92672">}}</span><span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">{{</span> end <span style="color:#f92672">}}</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">{{</span> end <span style="color:#f92672">}}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - name: email
</span></span><span style="display:flex;"><span>    email_configs:
</span></span><span style="display:flex;"><span>     - to: <span style="color:#e6db74">&#39;to@youremail.com&#39;</span>
</span></span><span style="display:flex;"><span>       from: <span style="color:#e6db74">&#39;default-alerts@yourdomain.com&#39;</span>
</span></span><span style="display:flex;"><span>       smarthost: <span style="color:#e6db74">&#39;smtp.host.com:2525&#39;</span>
</span></span><span style="display:flex;"><span>       auth_username: <span style="color:#e6db74">&#34;smtpusername&#34;</span>
</span></span><span style="display:flex;"><span>       auth_password: <span style="color:#e6db74">&#34;smtppassword&#34;</span>
</span></span><span style="display:flex;"><span>       html: <span style="color:#e6db74">&#39;{{ template &#34;email&#34; .}}&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>templates:
</span></span><span style="display:flex;"><span>- <span style="color:#e6db74">&#39;~/prometheus/alert.tmpl&#39;</span>
</span></span></code></pre></div><p>Here we have setup two channel email and slack for alert. if you see <code>alertmanager.yml</code> file, There are four main components I defined.</p>
<ul>
<li><code>global</code>: Here we can define any global variable like we defined <code>slack_api_url</code>.</li>
<li><code>route</code>: It is a routing block. I am playing routing on <code>severity</code>. Similarly, it is your choice on which variable you want to route your alerts. So here if <code>severity == ‘info’</code>, Alert will go from slack or if <code>severity == ‘critical’</code>, Alert will go via an email.</li>
<li><code>receivers</code>: Here we can define the channel by which alert will go. For now, I have defined only email &amp; slack. You can explore more receivers <a href="https://prometheus.io/docs/alerting/configuration/#receiver">here</a>.</li>
<li><code>templates</code>: It is an alert template where I have defined the HTML template for an email alert. It is not restricted to email. You can define a template for any channel. Explore more details about templates <a href="https://prometheus.io/docs/alerting/notification_examples/">here</a>.</li>
</ul>
<h3 id="step-5-sample-template">Step 5: Sample template</h3>
<p>Create and Paste below code in <code>~/prometheus/alert.tmpl</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#f92672">{{</span> define <span style="color:#e6db74">&#34;email&#34;</span> <span style="color:#f92672">}}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;html&gt;
</span></span><span style="display:flex;"><span>   &lt;head&gt;
</span></span><span style="display:flex;"><span>      &lt;style type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/css&#34;</span>&gt;
</span></span><span style="display:flex;"><span>         table <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>         font-family: verdana,arial,sans-serif;
</span></span><span style="display:flex;"><span>         font-size:11px;
</span></span><span style="display:flex;"><span>         color:#333333;
</span></span><span style="display:flex;"><span>         border-width: 1px;
</span></span><span style="display:flex;"><span>         border-color: <span style="color:#75715e">#999999;</span>
</span></span><span style="display:flex;"><span>         border-collapse: collapse;
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>         table th <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>         background-color:#ff6961;
</span></span><span style="display:flex;"><span>         border-width: 1px;
</span></span><span style="display:flex;"><span>         padding: 8px;
</span></span><span style="display:flex;"><span>         border-style: solid;
</span></span><span style="display:flex;"><span>         border-color: <span style="color:#75715e">#F54C44;</span>
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>         table td <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>         border-width: 1px;
</span></span><span style="display:flex;"><span>         padding: 8px;
</span></span><span style="display:flex;"><span>         border-style: solid;
</span></span><span style="display:flex;"><span>         border-color: <span style="color:#75715e">#F54C44;</span>
</span></span><span style="display:flex;"><span>         text-align: right;
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>      &lt;/style&gt;
</span></span><span style="display:flex;"><span>   &lt;/head&gt;
</span></span><span style="display:flex;"><span>   &lt;body&gt;
</span></span><span style="display:flex;"><span>      &lt;table border<span style="color:#f92672">=</span>1&gt;
</span></span><span style="display:flex;"><span>         &lt;thead&gt;    
</span></span><span style="display:flex;"><span>           &lt;tr&gt;
</span></span><span style="display:flex;"><span>        &lt;th&gt;Alert name&lt;/th&gt;
</span></span><span style="display:flex;"><span>        &lt;th&gt;Host&lt;/th&gt;
</span></span><span style="display:flex;"><span>            &lt;th&gt;Summary&lt;/th&gt;
</span></span><span style="display:flex;"><span>            &lt;th&gt;Description&lt;/th&gt;
</span></span><span style="display:flex;"><span>           &lt;/tr&gt;
</span></span><span style="display:flex;"><span>         &lt;/thead&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>         &lt;tbody&gt;
</span></span><span style="display:flex;"><span>       <span style="color:#f92672">{{</span> range .Alerts <span style="color:#f92672">}}</span>
</span></span><span style="display:flex;"><span>            &lt;tr&gt;
</span></span><span style="display:flex;"><span>         &lt;td&gt;<span style="color:#f92672">{{</span> .Labels.alertname <span style="color:#f92672">}}</span>&lt;/td&gt;
</span></span><span style="display:flex;"><span>         &lt;td&gt;<span style="color:#f92672">{{</span> .Annotations.host <span style="color:#f92672">}}</span>&lt;/td&gt;
</span></span><span style="display:flex;"><span>         &lt;td&gt;<span style="color:#f92672">{{</span> .Annotations.summary <span style="color:#f92672">}}</span>&lt;/td&gt;
</span></span><span style="display:flex;"><span>         &lt;td&gt;<span style="color:#f92672">{{</span> .Annotations.description <span style="color:#f92672">}}</span>&lt;/td&gt;
</span></span><span style="display:flex;"><span>           &lt;/tr&gt;
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">{{</span> end <span style="color:#f92672">}}</span>
</span></span><span style="display:flex;"><span>         &lt;/tbody&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      &lt;/table&gt;
</span></span><span style="display:flex;"><span>  &lt;/body&gt;
</span></span><span style="display:flex;"><span>&lt;/html&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{{</span>end<span style="color:#f92672">}}</span>
</span></span></code></pre></div><h3 id="step-6-start-alertmanager-service--restart-prometheus">Step 6: Start alertmanager service &amp; restart prometheus</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ sudo systemctl start alertmanager
</span></span><span style="display:flex;"><span>$ sudo systemctl restart prometheus
</span></span></code></pre></div><h2 id="test-complete-integration">Test complete Integration:</h2>
<p>If everything is set up correctly and alert rule getting true then it will trigger an alert. You can enable the log of alertmanager for debugging purposes.</p>
<p>If you want to test alert, Then simply make threshold to very less 0% or 1% after 30s it should trigger the alert.</p>
<p>Visit <code>localhost:9093</code>. If there is some alert you will get the list on the dashboard.</p>
<p>So we successfully setup alert using alertmanager. In <a href="https://ashish.one/blogs/write-custom-exporters-prometheus/">part - 3</a> I have explained how you can write your own custom exporters &amp; You can check <a href="https://ashish.one/blogs/setup-grafana-with-prometheus/">part - 4</a> to integrate Grafana with Prometheus.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Part 1] How To Setup Prometheus And Exporters For Alerts And Monitoring?</title>
      <link>https://ashish.one/blogs/setup-prometheus-and-exporters/</link>
      <pubDate>Sun, 22 Sep 2019 15:20:39 +0530</pubDate>
      
      <guid>https://ashish.one/blogs/setup-prometheus-and-exporters/</guid>
      <description>As a developer, many times you would have worried, whether your services are up and running or not. Not only that, sometimes as an infrastructure guy you might be also worried about your server’s health too. What is the current RAM or disk utilization? or whether they are going to be fully occupied which in turn can completely bring the system down. These are just the basics and in fact there are tons of more such things which need to be monitored and fixed in everyday&amp;rsquo;s life.</description>
      <content:encoded><![CDATA[<p>As a developer, many times you would have worried, whether your services are up and running or not. Not only that, sometimes as an infrastructure guy you might be also worried about your server’s health too. What is the current RAM or disk utilization? or whether they are going to be fully occupied which in turn can completely bring the system down. These are just the basics and in fact there are tons of more such things which need to be monitored and fixed in everyday&rsquo;s life.</p>
<blockquote>
<p><strong>“Never send a human to do a machine&rsquo;s job”</strong></p>
</blockquote>
<p>At some time, deploying humans to check all these and that too for 24 * 7 can be a real pain.</p>
<p>That&rsquo;s exactly the purpose of writing this tutorial series around monitoring and alerting. In this tutorial, you will learn how to setup Prometheus as a universal monitoring system and how to use its exporter to define and fetch the metrics which are really important to track.</p>
<h2 id="what-is-prometheus">What is Prometheus?</h2>
<p>Prometheus is an open-source system for monitoring and alerting. It developed in the GO language. It is currently a standalone open source project and maintained independently by any organization. You can check more details <a href="https://prometheus.io/docs/introduction/overview/#what-is-prometheus">here</a>.</p>
<h2 id="why-prometheus">Why Prometheus?</h2>
<ol>
<li>Open-source and of course freely available :)</li>
<li>It is constantly contributed by the community. It is stable and used by many good brands.  Check <a href="https://stackshare.io/prometheus">Stackshare</a>.</li>
<li>Good community support and well documented.</li>
<li>You do not need any big infrastructure to get started. It can be started with 1 GB RAM.</li>
<li>It has its own UI to check any metrics. But, many prefer Grafana with Prometheus which gives you better visualization on your Prometheus metrics.</li>
<li>Lots of pre-build Grafana dashboard and exporters already written. You have to just reuse those exporters.
You can check the list of Prometheus features <a href="https://prometheus.io/docs/introduction/overview/#features">here</a>.</li>
<li>You can check the list of Prometheus features <a href="https://prometheus.io/docs/introduction/overview/#features">here</a>.</li>
</ol>
<h2 id="prerequisites-for-setting-up-prometheus">Prerequisites for setting up Prometheus</h2>
<p>Here Is This Tutorial, Prometheus Is Installed And Tested On A Test Server With Minimum Configuration:</p>
<ul>
<li>2 GB RAM</li>
<li>10 GB Avg local disk storage.</li>
<li>GOLANG (go1.11.5 linux/amd64)</li>
<li>Centos7 RHEL</li>
</ul>
<h2 id="setup-prometheus">Setup Prometheus</h2>
<h3 id="installation">Installation</h3>
<p>There are multiple ways to install Prometheus. You can use docker image or use any of the available configuration management systems like Ansible, chef, puppet and salt stack. For more information on installation, visit the official installation guide here.</p>
<p>It also has pre-compiled binaries available. I am going to use this binary for installation because it is easy to set up and easy to understand because of we already familiar with the utilization of binary files.</p>
<h4 id="step-1-download-the-prometheus-binary">Step 1: Download the Prometheus binary</h4>
<p>Visit <a href="https://prometheus.io/download/">Prometheus</a> download page. It will give you a list of pre-compiled binaries for drawins, linux, and windows. You can download according to your OS. Below, the installation is explained for Linux OS.</p>
<p>OR</p>
<p>You can simply fire below command in your Linux terminal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ wget https://github.com/prometheus/prometheus/releases/download/v2.11.1/prometheus-2.11.1.linux-amd64.tar.gz
</span></span></code></pre></div><p><img loading="lazy" src="/img/prometheus-setup/download_prometheus_binary.png" alt="prometheus binary download"  />
</p>
<h4 id="step-2-extract-the-tar">Step 2: Extract The Tar</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ tar -xvzf prometheus-2.11.1.linux-amd64.tar.gz
</span></span></code></pre></div><h4 id="step-3-after-extraction-steps">Step 3: After Extraction Steps</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ mv prometheus-2.11.1.linux-amd64 prometheus 
</span></span><span style="display:flex;"><span>$ cd prometheus/$ ll
</span></span></code></pre></div><p>Folder contains below file:</p>
<p><img loading="lazy" src="/img/prometheus-setup/folder_structure.png" alt="Folder structure"  />
</p>
<ul>
<li><code>prometheus</code>: It&rsquo;s a binary file which is the core daemon.</li>
<li><code>prometheus.yml</code>: This is the config file for Prometheus service.</li>
<li><code>promtool</code>: This is another binary file which is used to compile the alert rules file. This will be explained in detail in the next series to this tutorial.</li>
</ul>
<h4 id="step-4-execute-the-binary-file-using-the-below-command">Step 4: Execute The Binary File Using The Below Command:</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ ./prometheus
</span></span></code></pre></div><p><img loading="lazy" src="/img/prometheus-setup/start_prometheus.png" alt="Start Prometheus"  />
</p>
<p>Visit <code>localhost:9090</code> on your web browser:</p>
<p><img loading="lazy" src="/img/prometheus-setup/prometheus_ui.png" alt="Prometheus UI"  />
</p>
<p>Your Prometheus is up and running!</p>
<p>If you notice in <code>prometheus/</code> folder, It created a folder with the name <code>data</code>. Prometheus starts storing metrics in this <code>/data</code> folder only.</p>
<p>Now get all metric list by hitting the URL to <code>localhost:9090/metrics</code></p>
<p><img loading="lazy" src="/img/prometheus-setup/metrics.png" alt="Prometheus metrics"  />
</p>
<p>Prometheus stores data on disk in time series, with its custom format.  Behind the scenes, it uses <a href="https://github.com/google/leveldb">leveldb</a>. You can check more <a href="https://prometheus.io/docs/prometheus/latest/storage/">details</a> on storage.</p>
<p>Here is a sample production command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ ~/prometheus/prometheus --storage.tsdb.path<span style="color:#f92672">=</span>/var/lib/prometheus/data/ --web.external-url<span style="color:#f92672">=</span>http://myurl.com:9090
</span></span></code></pre></div><p><code>--storage.tsdb.path</code>: Specify the path where you want to save Prometheus data.<br>
<code>--web.external-url</code>: You can use this option if you want to bind your address with your URL.</p>
<p>You can get below error in case of your folder don’t have appropriate permission:</p>
<p><code>level=error ts=2019-08-06T14:25:19.791Z caller=main.go:731 err=&quot;opening storage failed: lock DB directory: open /var/lib/lock: permission denied&quot;</code></p>
<p>You can try appending <code>sudo</code>  to your command  OR you can give appropriate permission to your folder.</p>
<h4 id="step-5-run-prometheus-as-service">Step 5: Run Prometheus As Service.</h4>
<ol>
<li>Create File</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ vim /etc/systemd/system/prometheus.service
</span></span></code></pre></div><ol start="2">
<li>Just paste below code:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#f92672">[</span>Unit<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>Description<span style="color:#f92672">=</span>Prometheus Server
</span></span><span style="display:flex;"><span>Documentation<span style="color:#f92672">=</span>https://prometheus.io/docs/introduction/overview/
</span></span><span style="display:flex;"><span>After<span style="color:#f92672">=</span>network-online.target
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>Service<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>User<span style="color:#f92672">=</span>root
</span></span><span style="display:flex;"><span>Restart<span style="color:#f92672">=</span>on-failure
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Change this line if you download the </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Prometheus on different path user</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ExecStart<span style="color:#f92672">=</span>~/prometheus/prometheus --storage.tsdb.path<span style="color:#f92672">=</span>/var/lib/prometheus/data/ --web.external-url<span style="color:#f92672">=</span>http://myurl.com:9090
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>Install<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>WantedBy<span style="color:#f92672">=</span>multi-user.target
</span></span></code></pre></div><pre><code>Save and exit.
</code></pre>
<ol start="3">
<li>Reload the Systemctl Daemon:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ sudo systemctl daemon-reload
</span></span></code></pre></div><ol start="4">
<li>Start the Prometheus service:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo systemctl start prometheus
</span></span></code></pre></div><p>Till now you learned how to do basic Prometheus setup. Now, you will learn, how to set up Prometheus exporter.</p>
<h2 id="prometheus-exporter-setup">Prometheus Exporter Setup</h2>
<h3 id="what-is-exporter">What Is Exporter?</h3>
<p>Exporters can be any scripts or services which will fetch specific metrics from your system and gives data in Prometheus format. There are primarily two ways by which you can fetch metrics and store into Prometheus:</p>
<ol>
<li>
<p>Via exporter, In which one service will run on a specific port. So whenever Prometheus service will hit exporter URL with the specific port it will give output in Prometheus format. We will see sample response in the below example during setting up the node exporter.</p>
</li>
<li>
<p>The second approach is you can write a script which will push data in time series to the Prometheus server. Any metric which cannot be scrape by the exporter, It can be pushed using the push method. You will get more info here on this.</p>
</li>
</ol>
<p>You can use both methods but usually, people prefer the first one to fetch metrics.</p>
<p>So now we are going to setup <a href="https://github.com/prometheus/node_exporter">node exporter</a>. It will fetch your server metrics which will be RAM/DISK/CPU utilization, network, io etc.</p>
<h3 id="node-exporter-setup">Node Exporter Setup</h3>
<h4 id="step-1-download-the-binary-file-and-start-node-exporter">Step 1: Download The Binary File And Start Node Exporter:</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ wget https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz
</span></span><span style="display:flex;"><span>$ tar -xvzf node_exporter-0.18.1.linux-amd64.tar.gz
</span></span><span style="display:flex;"><span>$ mv node_exporter-0.18.1.linux-amd64 node_exporter
</span></span><span style="display:flex;"><span>$ cd node_exporter
</span></span><span style="display:flex;"><span>$ ./node_exporter
</span></span></code></pre></div><p>You should see below output once the node exporter is started:</p>
<p><img loading="lazy" src="/img/prometheus-setup/node_exporter_start.png" alt="Start node exporter"  />
</p>
<p>Just visit to <code>localhost:9100/metrics</code></p>
<p><img loading="lazy" src="/img/prometheus-setup/node_exporter_metrics.png" alt="Node exporter metrics"  />
</p>
<h4 id="step-2-lets-run-node-exporter-as-service">Step 2: Let&rsquo;s Run Node Exporter As Service:</h4>
<ol>
<li>Create a file in below path:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>/etc/systemd/system/node-exporter.service
</span></span></code></pre></div><ol start="2">
<li>Just paste below code:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#f92672">[</span>Unit<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>Description<span style="color:#f92672">=</span>Node exporter
</span></span><span style="display:flex;"><span>After<span style="color:#f92672">=</span>network-online.target
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>Service<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>User<span style="color:#f92672">=</span>root
</span></span><span style="display:flex;"><span>Restart<span style="color:#f92672">=</span>on-failure
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Change this line if you download the </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Prometheus on different path user</span>
</span></span><span style="display:flex;"><span>ExecStart<span style="color:#f92672">=</span>~/node_exporter/node_exporter
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>Install<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>WantedBy<span style="color:#f92672">=</span>multi-user.target
</span></span></code></pre></div><ol start="3">
<li>Reload the systemctl daemon:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo systemctl daemon-reload
</span></span></code></pre></div><ol start="4">
<li>Start the Prometheus service:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo systemctl start node-exporter
</span></span></code></pre></div><h4 id="step-3-prometheusyml">Step 3: <code>prometheus.yml</code></h4>
<p>You Are Set With Node Exporter. Now In Prometheus, We Need To Configure This Node Exporter Reference So That Prometheus Can Collect Metrics From This Exporter.</p>
<p>Open file <code>~/prometheus/prometheus.yml</code> add below configuration:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>scrape_configs:
</span></span><span style="display:flex;"><span> <span style="color:#75715e"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span>
</span></span><span style="display:flex;"><span> - job_name: <span style="color:#e6db74">&#39;prometheus&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># metrics_path defaults to &#39;/metrics&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># scheme defaults to &#39;http&#39;. </span>
</span></span><span style="display:flex;"><span>   static_configs:
</span></span><span style="display:flex;"><span>   - targets: <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;localhost:9090&#39;</span><span style="color:#f92672">]</span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add below block for node_exporter</span>
</span></span><span style="display:flex;"><span> - job_name: node_exporter
</span></span><span style="display:flex;"><span>   scrape_interval: 1m
</span></span><span style="display:flex;"><span>   scrape_timeout:  1m
</span></span><span style="display:flex;"><span>   metrics_path: <span style="color:#e6db74">&#34;/metrics&#34;</span> 
</span></span><span style="display:flex;"><span>   static_configs: 
</span></span><span style="display:flex;"><span>   - targets: <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;localhost:9100&#39;</span><span style="color:#f92672">]</span>
</span></span></code></pre></div><p>Save and exit.</p>
<p><code>job_name</code>: You can give any name to your scrape job.<br>
<code>scrape_interval</code>: Interval in which Prometheus will scrape the metrics from the specified URL.<br>
<code>scrape_timeout</code>: If your exporter has taken more than 1m to scrape the metrics it will be a timeout.<br>
<code>metric_path</code>: This is what your endpoint’s path should be (i.e localhost:9100/metrics)<br>
<code>targets</code>: Here you can specify the number of servers on which node exporter is running with the same configuration.</p>
<h4 id="step-4-heres-the-command-to-execute-prometheus">Step 4: Here&rsquo;s The Command To Execute Prometheus:</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>~/prometheus/prometheus --storage.tsdb.path<span style="color:#f92672">=</span>/var/lib/prometheus/data/ --config.file<span style="color:#f92672">=</span>~/prometheus/prometheus.yml --web.external-url<span style="color:#f92672">=</span>http://myurl.com:9090
</span></span></code></pre></div><p>Also, don’t forget to make the same changes in your service <code>file:/etc/systemd/system/prometheus.service</code></p>
<h4 id="step-5-restart-prometheus-service">Step 5: Restart prometheus service</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo systemctl restart prometheus
</span></span></code></pre></div><h4 id="step-6-visiting-localhost9090-again">Step 6: Visiting Localhost:9090 Again</h4>
<p>Now visit the URL <code>localhost:9090</code>. In Expression field you can search for <code>node_filesystem_size_bytes</code> by clicking on the <code>Execute</code> button. You will get the below stats:</p>
<p><img loading="lazy" src="/img/prometheus-setup/disk_utilization.png" alt="Disk utilization graph on node Exporter"  />
</p>
<p>After clicking on the <code>graph</code>:</p>
<p><img loading="lazy" src="/img/prometheus-setup/disk_utilization_graph.png" alt="Disk utilization graph on node Exporter"  />
</p>
<h2 id="installation-with-docker">Installation with Docker</h2>
<h3 id="prometheus">Prometheus</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker run <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -p 9090:9090 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -v ~/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    prom/prometheus
</span></span></code></pre></div><h3 id="node-exporter">Node Exporter</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker run -d <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --net<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;host&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --pid<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;host&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -v <span style="color:#e6db74">&#34;/:/host:ro,rslave&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  quay.io/prometheus/node-exporter <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --path.rootfs<span style="color:#f92672">=</span>/host
</span></span></code></pre></div><p>The rest of option will remain same as i explained in above parts.</p>
<h1 id="at-the-end">At the end</h1>
<p>Like this, you can explore each metrics like memory, CPU, etc.</p>
<p>There are already lots of exporters is available on the internet like Nginx exporter, MongoDB exporter, MySQL server exporter, etc. Just download them and start using it. You can check more info about exporter <a href="https://prometheus.io/docs/instrumenting/exporters/">here</a>.</p>
<p><strong>You have now successfully installed Prometheus and node exporters.</strong></p>
<p>If you see this <a href="https://prometheus.io/docs/introduction/overview/#architecture">official architecture diagram</a>, we have successfully set up the <strong>Prometheus</strong>, <strong>Pushgateway/Exporters</strong>, and <strong>Prometheus UI</strong>.</p>
<p>In the <a href="https://ashish.one/blogs/setup-alertmanager/">Part 2</a>, we will see how we can set up an alert manager and how to setup alert over the metrics.</p>
<p>Stay tuned for the new updates.</p>
<blockquote>
<p><strong>“NOTE: PROMETHEUS IS METRIC STORAGE SYSTEM. DON’T TRY TO STORE ANY KIND OF LOGS. IT IS NOT RECOMMENDED.”</strong></p>
</blockquote>
<p><strong>In case of any confusion or issues leave comments below :)</strong></p>
<p>Article partially posted on <a href="https://pepipost.com/tutorials/setup-prometheus-and-exporters/">Pepipost tutorial</a> by me.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
